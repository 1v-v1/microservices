version: '3.8'

services:
  # 数据库
  postgres:
    image: postgres:15-alpine
    container_name: loan-postgres
    environment:
      POSTGRES_DB: loanapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432" # 只允许本地访问
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - loan-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: loan-redis
    ports:
      - "127.0.0.1:6379:6379" # 只允许本地访问
    volumes:
      - redis_data:/data
    networks:
      - loan-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 用户服务
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: loan-user-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/user_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 贷款服务
  loan-service:
    build:
      context: ./loan-service
      dockerfile: Dockerfile
    container_name: loan-loan-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/loan_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      USER_SERVICE_URL: http://user-service:8001
      RISK_SERVICE_URL: http://risk-service:8004
      NOTIFICATION_SERVICE_URL: http://notification-service:8005
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 还款服务
  repayment-service:
    build:
      context: ./repayment-service
      dockerfile: Dockerfile
    container_name: loan-repayment-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/repayment_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      LOAN_SERVICE_URL: http://loan-service:8002
      NOTIFICATION_SERVICE_URL: http://notification-service:8005
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      loan-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8003/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 风控服务
  risk-service:
    build:
      context: ./risk-service
      dockerfile: Dockerfile
    container_name: loan-risk-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/risk_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      USER_SERVICE_URL: http://user-service:8001
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8004/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 通知服务
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: loan-notification-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/notification_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_FROM_NUMBER: ${TWILIO_FROM_NUMBER}
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8005/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 文件服务
  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    container_name: loan-file-service
    environment:
      DATABASE_URL: postgresql+pg8000://postgres:${POSTGRES_PASSWORD}@postgres:5432/file_service
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8006/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: loan-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - loan-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # API网关
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: loan-api-gateway
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      USER_SERVICE_URL: http://user-service:8001
      LOAN_SERVICE_URL: http://loan-service:8002
      REPAYMENT_SERVICE_URL: http://repayment-service:8003
      RISK_SERVICE_URL: http://risk-service:8004
      NOTIFICATION_SERVICE_URL: http://notification-service:8005
      FILE_SERVICE_URL: http://file-service:8006
    ports:
      - "127.0.0.1:8000:8000" # 只允许本地访问，通过Nginx代理
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      loan-service:
        condition: service_healthy
      repayment-service:
        condition: service_healthy
      risk-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      file-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: loan-prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
    networks:
      - loan-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: loan-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana/
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - loan-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:


networks:
  loan-network:
    driver: bridge
